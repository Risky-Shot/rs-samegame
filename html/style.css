:root {
  --grid-columns: 11;
  --grid-rows: 8;
  --temp-grid-columns: 11;
  --temp-grid-rows: 8;

  /*
  If everything was symmetrical, we could use vmin units for the grid blocks.
  However, there's other items on screen and the number of columns/rows can change.
  So instead, let's calculate a custom unit to use instead.
  */
  --vw-block-size: calc(85vw / var(--grid-columns));
  --vh-block-size: calc(calc(calc(100vh - 150px) * 0.8) / var(--grid-rows));
  --block-size: min(var(--vw-block-size), var(--vh-block-size));
  --block-unit: calc(var(--block-size) / 7.5);
  /* This should be approx 1vmin */
}

@font-face {
  font-family: 'Gilroy';
  src: url(./assets/crock.ttf) format('truetype');
}

body {
  font-family: 'Gilroy', sans-serif;
  /* overflow: hidden; */
  position: relative;
  /* Set position to relative to allow positioning of pseudo-element */
  background-size: cover;
}

.lock-container {
  display: grid;
  grid-template-columns: repeat(var(--grid-columns), 1fr);
  grid-template-rows: repeat(var(--grid-rows), 1fr);
  gap: calc(var(--block-unit) * 0.5) calc(var(--block-unit) * 0.25);
  z-index: 999;
}

.timer-container {
  background-color: rgb(36, 47, 59);
  display: flex;
  width: 100%;
  height: 10px;
  margin-top: auto;
  border-radius: 1vw;
  overflow: hidden;
}


.timer-progress-bar {
  bottom: 100px;
  background-color: rgb(0, 204, 3);
  width: 100%;
  height: 100%;
  border-radius: 5%;
}

.cube {
  /*box-sizing: border-box;*/
  width: var(--block-size);
  height: var(--block-size);
  z-index: 1000;
  border-radius: 50%;
}

.overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: transparent;
  z-index: 9999;
}

.empty {
  background: none;
  border: none;
}

.cuber {
  /* box-shadow: inset 0 0 0 1000px rgba(195, 0, 2, 0.8); */
  background-repeat: no-repeat;
  background-image: url('./assets/red.png');
  background-size: var(--block-size);
  border-radius: 50%;
}

.cubeg {
  /* box-shadow: inset 0 0 0 1000px rgba(249, 164, 13, 0.8); */
  background-repeat: no-repeat;
  background-image: url('./assets/circle.png');
  background-size: var(--block-size);
  border-radius: 50%;
}

.cubeb {
  /* box-shadow: inset 0 0 0 1000px rgba(115, 97, 70, 0.8); */
  background-repeat: no-repeat;
  background-image: url('./assets/yellow.png');
  background-size: var(--block-size);
  border-radius: 50%;
}

.other-container {
  display: flex;
  align-items: left;
  justify-content: left;
  gap: 10px;
  margin-top: 10px;
}

.hack-box-container {
  position: relative;
  border-radius: 0.5rem;
  /* outline: 0.1rem solid gray; */
  display: none;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  margin: 2.5vh auto;
  width: fit-content;
  /* overflow: hidden; */

  max-height: 95vh;
  max-width: 95vw;
  animation: fade 0.7s;
}

@keyframes fade {
  0% {
    opacity: 0;
  }

  100% {
    opacity: 1;
  }
}

.info-container {
  width: 90%;
  min-height: 10vh;
  display: flex;
  justify-content: center;
  flex-direction: column;
  align-items: center;
  gap: 5px;
  background-image: url('./assets/header.png');
  background-repeat: none;
  background-size: 100% 100%;
  padding: 1rem;
}

.info-container h2 {
  font-size: 2.5rem;
  color: rgb(143, 0, 0);
  margin: 0;
}

.info-container p {
  font-size: 1.5rem;
  color: rgb(255, 255, 255);
  margin: 0;
}

.outer-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  width: 100%;
  height: 100%;
  margin: 10% 10%;
  background: rgb(0, 0, 0);
  box-shadow: 0 0 20px 20px rgb(0, 0, 0);
}

.hack-box {
  flex-direction: column;
  align-items: center;
  justify-content: center;
  display: flex;
  margin: .75rem .75rem 1rem 0.75rem;
}